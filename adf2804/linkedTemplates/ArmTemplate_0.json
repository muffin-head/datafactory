{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf2804"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"linkedService3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedService3'"
		},
		"sqldata_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqldata'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalake2804.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedService3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldata')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sqldata_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sch.csv",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "File header ID",
						"type": "String"
					},
					{
						"name": "file header description",
						"type": "String"
					},
					{
						"name": "Start date",
						"type": "String"
					},
					{
						"name": "End Date ",
						"type": "String"
					},
					{
						"name": "File item name ",
						"type": "String"
					},
					{
						"name": "Rows loaded",
						"type": "String"
					},
					{
						"name": "Rows rejected error",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "anc.csv",
						"fileSystem": "newdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TANMAY0",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					},
					{
						"name": "TANMAY2",
						"type": "String"
					},
					{
						"name": "TANMAY3",
						"type": "String"
					},
					{
						"name": "V0.1",
						"type": "String"
					},
					{
						"name": "true",
						"type": "String"
					},
					{
						"name": "9687595126",
						"type": "String"
					},
					{
						"name": "40049 Clemons Street",
						"type": "String"
					},
					{
						"name": "01/03/22",
						"type": "String"
					},
					{
						"name": "31/03/22",
						"type": "String"
					},
					{
						"name": "1254635",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "dynamicdata"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "CashCentreID",
						"type": "String"
					},
					{
						"name": "CashCentreShiftID",
						"type": "String"
					},
					{
						"name": "CashCentreTeamID",
						"type": "String"
					},
					{
						"name": "PayRollNumber",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "DisplayName",
						"type": "String"
					},
					{
						"name": "CreatedBy",
						"type": "String"
					},
					{
						"name": "CreatedOn",
						"type": "String"
					},
					{
						"name": "UpdatedBy",
						"type": "String"
					},
					{
						"name": "DeletedBy",
						"type": "String"
					},
					{
						"name": "RowLockVersion",
						"type": "String"
					},
					{
						"name": "IsActive",
						"type": "String"
					},
					{
						"name": "Mobilenumber",
						"type": "String"
					},
					{
						"name": "Address ",
						"type": "String"
					},
					{
						"name": "start date",
						"type": "String"
					},
					{
						"name": "end date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dynamicdata"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "CashCentreID",
						"type": "String"
					},
					{
						"name": "CashCentreShiftID",
						"type": "String"
					},
					{
						"name": "CashCentreTeamID",
						"type": "String"
					},
					{
						"name": "PayRollNumber",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "DisplayName",
						"type": "String"
					},
					{
						"name": "CreatedBy",
						"type": "String"
					},
					{
						"name": "CreatedOn",
						"type": "String"
					},
					{
						"name": "UpdatedBy",
						"type": "String"
					},
					{
						"name": "DeletedBy",
						"type": "String"
					},
					{
						"name": "RowLockVersion",
						"type": "String"
					},
					{
						"name": "IsActive",
						"type": "String"
					},
					{
						"name": "Mobilenumber",
						"type": "String"
					},
					{
						"name": "Address ",
						"type": "String"
					},
					{
						"name": "joined date",
						"type": "String"
					},
					{
						"name": "end date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedService3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@item().name",
							"type": "Expression"
						},
						"container": "dynamicdata"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "CashCentreID",
						"type": "String"
					},
					{
						"name": "  CashCentreTypeID",
						"type": "String"
					},
					{
						"name": " RegionID",
						"type": "String"
					},
					{
						"name": "CashCentreCode",
						"type": "String"
					},
					{
						"name": "CashCentreDescription",
						"type": "String"
					},
					{
						"name": "RowLockVersion",
						"type": "String"
					},
					{
						"name": "IsActive",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cleanfileSiver.xlsx",
						"fileSystem": "dynamicdata"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "data",
						"type": "String"
					},
					{
						"name": "col1",
						"type": "String"
					},
					{
						"name": "col2",
						"type": "String"
					},
					{
						"name": "col3",
						"type": "String"
					},
					{
						"name": "col4",
						"type": "String"
					},
					{
						"name": "col5",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel7')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "test",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "dynamicdata"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "CashCentreID",
						"type": "String"
					},
					{
						"name": "CashCentreTypeID",
						"type": "String"
					},
					{
						"name": "RegionID",
						"type": "String"
					},
					{
						"name": "CashCentreCode",
						"type": "String"
					},
					{
						"name": "CashCentreDescription",
						"type": "String"
					},
					{
						"name": "CreatedBy",
						"type": "String"
					},
					{
						"name": "CreatedOn",
						"type": "String"
					},
					{
						"name": "UpdatedBy",
						"type": "String"
					},
					{
						"name": "UpdatedOn",
						"type": "String"
					},
					{
						"name": "DeletedBy",
						"type": "String"
					},
					{
						"name": "DeletedOn",
						"type": "String"
					},
					{
						"name": "RowLockVersion",
						"type": "String"
					},
					{
						"name": "IsActive",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel8')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dynamicvalidation.xlsx",
						"fileSystem": "dynamicdata"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "cashcenter",
						"type": "String"
					},
					{
						"name": "cashcentertype",
						"type": "String"
					},
					{
						"name": "region",
						"type": "String"
					},
					{
						"name": "cashcentertypeid",
						"type": "String"
					},
					{
						"name": "regionid",
						"type": "String"
					},
					{
						"name": "cashcenterid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cashcenter_and_type_region')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "data"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "EmployeeID",
						"type": "String"
					},
					{
						"name": "CashCentreID",
						"type": "String"
					},
					{
						"name": "CashCentreShiftID",
						"type": "String"
					},
					{
						"name": "CashCentreTeamID",
						"type": "String"
					},
					{
						"name": "PayRollNumber",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "DisplayName",
						"type": "String"
					},
					{
						"name": "CreatedBy",
						"type": "String"
					},
					{
						"name": "CreatedOn",
						"type": "String"
					},
					{
						"name": "UpdatedBy",
						"type": "String"
					},
					{
						"name": "DeletedBy",
						"type": "String"
					},
					{
						"name": "RowLockVersion",
						"type": "String"
					},
					{
						"name": "IsActive",
						"type": "String"
					},
					{
						"name": "Mobilenumber",
						"type": "String"
					},
					{
						"name": "Address ",
						"type": "String"
					},
					{
						"name": "start date",
						"type": "String"
					},
					{
						"name": "end date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CashcenterDWH')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "RegionHash"
						},
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "cashCentertypeHash"
						},
						{
							"linkedService": {
								"referenceName": "linkedService3",
								"type": "LinkedServiceReference"
							},
							"name": "cashcenter"
						},
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "sourcecashCenterhashStaging"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "DWHCashcenterUpdate"
						},
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "DWHCashcenterInsert"
						}
					],
					"transformations": [
						{
							"name": "existsCashcenterID"
						},
						{
							"name": "Update"
						},
						{
							"name": "Insert"
						},
						{
							"name": "NotexistsCashcenterID"
						},
						{
							"name": "ValidateRegion"
						},
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     region as string,",
						"     cashcentertype as string,",
						"     cashcenter as string,",
						"     existCashcentertype as string,",
						"     existRegion as string,",
						"     existcashcenterID as string",
						"}",
						"source(output(",
						"          RegionID as integer,",
						"          RegionCode as string,",
						"          RegionDescription as string,",
						"          CreatedBy as string,",
						"          CreatedOn as timestamp,",
						"          UpdatedBy as string,",
						"          UpdatedOn as timestamp,",
						"          DeletedBy as string,",
						"          DeletedOn as timestamp,",
						"          RowLockVersion as string,",
						"          sha as string,",
						"          IsActive as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: (concat('gold/', $region)),",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> RegionHash",
						"source(output(",
						"          CashCentreTypeID as integer,",
						"          CashCentreTypeCode as string,",
						"          CashCentreTypeDescription as string,",
						"          CreatedBy as string,",
						"          CreatedOn as timestamp,",
						"          UpdatedBy as string,",
						"          UpdatedOn as timestamp,",
						"          DeletedBy as string,",
						"          DeletedOn as timestamp,",
						"          RowLockVersion as string,",
						"          sha as string,",
						"          IsActive as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: (concat('gold/', $cashcentertype)),",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> cashCentertypeHash",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     container: 'dynamicdata',",
						"     wildcardPaths:[($cashcenter)]) ~> cashcenter",
						"source(output(",
						"          CashCentreID as integer,",
						"          {  CashCentreTypeID} as short,",
						"          { RegionID} as short,",
						"          CashCentreCode as integer,",
						"          CashCentreDescription as string,",
						"          RowLockVersion as short,",
						"          IsActive as boolean,",
						"          CashCentreTypeID as short,",
						"          CashCentreTypeCode as integer,",
						"          CashCentreTypeDescription as string,",
						"          sha as string,",
						"          RegionID as short,",
						"          RegionCode as short,",
						"          RegionDescription as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DWH_cashcenter',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourcecashCenterhashStaging",
						"ValidateRegion, sourcecashCenterhashStaging exists(toString(byName($existcashcenterID)) == toString(byName($existcashcenterID)),",
						"     negate:false,",
						"     broadcast: 'auto')~> existsCashcenterID",
						"existsCashcenterID alterRow(updateIf(true())) ~> Update",
						"NotexistsCashcenterID alterRow(insertIf(true())) ~> Insert",
						"ValidateRegion, sourcecashCenterhashStaging exists(toString(byName($existcashcenterID)) == toString(byName($existcashcenterID)),",
						"     negate:true,",
						"     broadcast: 'auto')~> NotexistsCashcenterID",
						"exists1, RegionHash exists(toString(byName('RegionID','cashcenter')) == toString(byName('RegionID','RegionHash')),",
						"     negate:false,",
						"     broadcast: 'auto')~> ValidateRegion",
						"cashcenter, cashCentertypeHash exists(toString(byName('CashCentreTypeID','cashcenter')) == toString(byName('CashCentreTypeID','cashCentertypeHash')),",
						"     negate:false,",
						"     broadcast: 'auto')~> exists1",
						"Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DWH_cashcenter',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['CashCentreID'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DWHCashcenterUpdate",
						"Insert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DWH_cashcenter',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DWHCashcenterInsert"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldata')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_cashcentertype_SQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH_sqlCashcenter"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "cashcentertypeNEWdata"
						},
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "DWHCashcentertype"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "DWHcashcentertypeUpdate"
						},
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "DWHcashcentertypeInsert"
						}
					],
					"transformations": [
						{
							"name": "generateHASH"
						},
						{
							"name": "dosentexists"
						},
						{
							"name": "insert"
						},
						{
							"name": "NOTexistsCashcentertypeID"
						},
						{
							"name": "update"
						},
						{
							"name": "Generatehash1"
						},
						{
							"name": "existsCashcentertypeID"
						},
						{
							"name": "DerivecolUpdateDeleted"
						},
						{
							"name": "DerivecolInsertDeleted"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CashCentreTypeID as integer,",
						"          CashCentreTypeCode as string,",
						"          CashCentreTypeDescription as string,",
						"          CreatedBy as string,",
						"          CreatedOn as timestamp,",
						"          UpdatedBy as string,",
						"          UpdatedOn as timestamp,",
						"          DeletedBy as string,",
						"          DeletedOn as timestamp,",
						"          RowLockVersion as string,",
						"          IsActive as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'CashCentreType',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> cashcentertypeNEWdata",
						"source(output(",
						"          CashCentreTypeID as integer,",
						"          CashCentreTypeCode as string,",
						"          CashCentreTypeDescription as string,",
						"          CreatedBy as string,",
						"          CreatedOn as timestamp,",
						"          UpdatedBy as string,",
						"          UpdatedOn as timestamp,",
						"          DeletedBy as string,",
						"          DeletedOn as timestamp,",
						"          RowLockVersion as string,",
						"          sha as string,",
						"          IsActive as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DWH_CashCentreType',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DWHCashcentertype",
						"cashcentertypeNEWdata derive(sha = sha1(CashCentreTypeID,CashCentreTypeCode,CashCentreTypeDescription,IsActive)) ~> generateHASH",
						"generateHASH, Generatehash1 exists(generateHASH@sha == Generatehash1@sha,",
						"     negate:true,",
						"     broadcast: 'auto')~> dosentexists",
						"DerivecolInsertDeleted alterRow(insertIf(true())) ~> insert",
						"dosentexists, DWHCashcentertype exists(cashcentertypeNEWdata@CashCentreTypeID == DWHCashcentertype@CashCentreTypeID,",
						"     negate:true,",
						"     broadcast: 'auto')~> NOTexistsCashcentertypeID",
						"DerivecolUpdateDeleted alterRow(updateIf(true())) ~> update",
						"DWHCashcentertype derive(sha = sha1(CashCentreTypeID,CashCentreTypeCode,CashCentreTypeDescription,IsActive)) ~> Generatehash1",
						"dosentexists, DWHCashcentertype exists(cashcentertypeNEWdata@CashCentreTypeID == DWHCashcentertype@CashCentreTypeID,",
						"     negate:false,",
						"     broadcast: 'auto')~> existsCashcentertypeID",
						"existsCashcentertypeID derive(UpdatedOn = currentTimestamp(),",
						"          DeletedOn = case(IsActive==false(), currentTimestamp())) ~> DerivecolUpdateDeleted",
						"NOTexistsCashcentertypeID derive(CreatedOn = currentTimestamp(),",
						"          DeletedOn = case(IsActive==false(), currentTimestamp())) ~> DerivecolInsertDeleted",
						"update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DWH_CashCentreType',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['CashCentreTypeID'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DWHcashcentertypeUpdate",
						"insert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DWH_CashCentreType',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DWHcashcentertypeInsert"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_region_SQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH_sqlCashcenter"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "sourceRegion"
						},
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "DWHRegion"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "DWHUpdateRegion"
						},
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "DWHinsertRegion"
						}
					],
					"transformations": [
						{
							"name": "generateHASH"
						},
						{
							"name": "dosentexists"
						},
						{
							"name": "insert"
						},
						{
							"name": "NOTexistsRegionID"
						},
						{
							"name": "update"
						},
						{
							"name": "GenerateHash1"
						},
						{
							"name": "existsRegionID"
						},
						{
							"name": "DerivecolUpdateDeleted"
						},
						{
							"name": "DerivecolumnInsertDeleted"
						}
					],
					"scriptLines": [
						"source(output(",
						"          RegionID as integer,",
						"          RegionCode as string,",
						"          RegionDescription as string,",
						"          CreatedBy as string,",
						"          CreatedOn as timestamp,",
						"          UpdatedBy as string,",
						"          UpdatedOn as timestamp,",
						"          DeletedBy as string,",
						"          DeletedOn as timestamp,",
						"          RowLockVersion as string,",
						"          IsActive as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'Region',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceRegion",
						"source(output(",
						"          RegionID as integer,",
						"          RegionCode as string,",
						"          RegionDescription as string,",
						"          CreatedBy as string,",
						"          CreatedOn as timestamp,",
						"          UpdatedBy as string,",
						"          UpdatedOn as timestamp,",
						"          DeletedBy as string,",
						"          DeletedOn as timestamp,",
						"          RowLockVersion as string,",
						"          sha as string,",
						"          IsActive as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DWH_region',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DWHRegion",
						"sourceRegion derive(sha = sha1(RegionID,RegionCode,RegionDescription,IsActive)) ~> generateHASH",
						"generateHASH, GenerateHash1 exists(generateHASH@sha == GenerateHash1@sha,",
						"     negate:true,",
						"     broadcast: 'auto')~> dosentexists",
						"DerivecolumnInsertDeleted alterRow(insertIf(true())) ~> insert",
						"dosentexists, DWHRegion exists(sourceRegion@RegionID == DWHRegion@RegionID,",
						"     negate:true,",
						"     broadcast: 'auto')~> NOTexistsRegionID",
						"DerivecolUpdateDeleted alterRow(updateIf(true())) ~> update",
						"DWHRegion derive(sha = sha1(RegionID,RegionCode,RegionDescription,IsActive)) ~> GenerateHash1",
						"dosentexists, DWHRegion exists(sourceRegion@RegionID == DWHRegion@RegionID,",
						"     negate:false,",
						"     broadcast: 'auto')~> existsRegionID",
						"existsRegionID derive(UpdatedOn = currentTimestamp(),",
						"          DeletedOn = case(IsActive==false(), currentTimestamp())) ~> DerivecolUpdateDeleted",
						"NOTexistsRegionID derive(CreatedOn = currentTimestamp(),",
						"          DeletedOn = case(IsActive==false(), currentTimestamp())) ~> DerivecolumnInsertDeleted",
						"update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DWH_Region',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['RegionID'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DWHUpdateRegion",
						"insert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DWH_Region',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DWHinsertRegion"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService3",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CashCentreTypeID as short,",
						"          CashCentreTypeCode as integer,",
						"          CashCentreTypeDescription as string,",
						"          RowLockVersion as short,",
						"          IsActive as boolean,",
						"          pass as string,",
						"          Month as date 'dd/MM/yyyy',",
						"          payment as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dynamicdata',",
						"     fileName: 'cashcentertype.xlsx',",
						"     sheetName: 'Sheet1',",
						"     firstRowAsHeader: true) ~> source1",
						"source1 derive(abc = toString(byName('CashCentreTypeID'))) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(bb = toString(byName('CashCentreTypeID'))),",
						"     each(match(name=='payment'), $$ = sum($$))) ~> aggregate1",
						"source1 aggregate(groupBy(Month = month(Month)),",
						"     each(match(name=='payment'), $$ = sum($$))) ~> aggregate3",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'newdata',",
						"     folderPath: 'selectdata',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedService3')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dynamicDataDuplidaceDWH')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "SilverPIPELINE"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "GoldLineage"
						}
					],
					"transformations": [
						{
							"name": "REMOVEDUP"
						}
					],
					"scriptLines": [
						"parameters{",
						"     filename as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: (concat('silver/',$filename)),",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> SilverPIPELINE",
						"SilverPIPELINE aggregate(groupBy(hash = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> REMOVEDUP",
						"REMOVEDUP sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: (concat('gold/', $filename)),",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> GoldLineage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dynamicDataDuplidaceDWH_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWH"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "SilverPIPELINE"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "GoldLineage"
						},
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "sqldata",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "REMOVEDUP"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     filename as string,",
						"     groupby as string,",
						"     payment as string,",
						"     date as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: (concat('silver/',$filename)),",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> SilverPIPELINE",
						"SilverPIPELINE aggregate(groupBy(hash = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> REMOVEDUP",
						"SilverPIPELINE aggregate(groupBy(totalPayment = toString(byName($groupby))),",
						"     each(match(name==$payment), $$ = sum(toInteger($$)))) ~> aggregate1",
						"SilverPIPELINE aggregate(groupBy(monthTotal = month(toDate(toString(byName($date))))),",
						"     each(match(name==$payment), $$ = sum(toInteger($$)))) ~> aggregate2",
						"REMOVEDUP sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: (concat('gold/', $filename)),",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> GoldLineage",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: (concat('gold_aggregation/', $filename)),",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: (concat('gold_dateTotal/', $filename)),",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldata')]"
			]
		}
	]
}