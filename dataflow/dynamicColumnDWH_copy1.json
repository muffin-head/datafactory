{
	"name": "dynamicColumnDWH_copy1",
	"properties": {
		"folder": {
			"name": "DWH"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Excel1",
						"type": "DatasetReference"
					},
					"name": "LocalStaging"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService4",
						"type": "LinkedServiceReference"
					},
					"name": "SilverLineage"
				},
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "DUMMYvalidate"
				},
				{
					"name": "RegexSTR"
				},
				{
					"name": "RegexNum"
				},
				{
					"name": "split1"
				},
				{
					"name": "split2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "derivedColumn5"
				}
			],
			"scriptLines": [
				"parameters{",
				"     source as string,",
				"     sink as string,",
				"     parameter1 as string (''),",
				"     parameter2 as string (''),",
				"     parameter3 as string (''),",
				"     parameter4 as string ('')",
				"}",
				"source(output(",
				"          RegionID as short,",
				"          RegionCode as short,",
				"          RegionDescription as string,",
				"          RowLockVersion as short,",
				"          IsActive as boolean,",
				"          MobileNumber as string,",
				"          {start date} as date,",
				"          emailid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:[($source)]) ~> LocalStaging",
				"LocalStaging derive(validate = true()) ~> DUMMYvalidate",
				"DUMMYvalidate derive(each(match(type=='string'&&name==$parameter1||name==$parameter2||name==$parameter3), $$ = regexReplace(toString($$), '[!@#$%^&*()]',''))) ~> RegexSTR",
				"filter1 derive(each(match(type=='short'), $$ = regexReplace($$, '[!@#$%^&*a-zA-Z]',''))) ~> RegexNum",
				"derivedColumn5 split(between(toDate(toString(byName($parameter3))),currentDate()-9125,currentDate()+15)",
				"",
				",",
				"     disjoint: true) ~> split1@(date, nodate)",
				"split1@date split(like( toString(byName($parameter4)),'%@%.com'),",
				"     disjoint: false) ~> split2@(email, noemail)",
				"split2@email derive(mobile = case(length(right(toString(byName($parameter2)), 10))==10,(right(toString(byName($parameter2)), 10)),'invalid')) ~> derivedColumn3",
				"derivedColumn3 filter(mobile!='invalid') ~> filter1",
				"derivedColumn3 filter(mobile=='invalid') ~> filter2",
				"RegexSTR derive(each(match(name=='MobileNumber'), $$ = case(length(right(toString(byName($parameter2)), 10))==10,(right(toString(byName($parameter2)), 10)),'invalid'))) ~> derivedColumn4",
				"derivedColumn4 derive(each(match(name=='emailid'), $$ = case(like( toString(byName($parameter4)),'%@%.com'),$$,'invalid'))) ~> derivedColumn5",
				"RegexNum sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: (concat('silver/',$sink)),",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SilverLineage",
				"split1@nodate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}