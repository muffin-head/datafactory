{
	"name": "dynamicColumnDWHValidate",
	"properties": {
		"folder": {
			"name": "DWH"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage2",
						"type": "LinkedServiceReference"
					},
					"name": "LocalStaging"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService4",
						"type": "LinkedServiceReference"
					},
					"name": "SilverLineage"
				},
				{
					"linkedService": {
						"referenceName": "linkedService4",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn9"
				},
				{
					"name": "split1"
				},
				{
					"name": "assert2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     source as string,",
				"     sink as string,",
				"     parameter1 as string (''),",
				"     parameter2 as string (''),",
				"     parameter3 as string (''),",
				"     parameter4 as string ('')",
				"}",
				"source(output(",
				"          RegionID as short,",
				"          RegionCode as short,",
				"          RegionDescription as string,",
				"          RowLockVersion as short,",
				"          IsActive as boolean,",
				"          MobileNumber as string,",
				"          {start date} as date,",
				"          emailid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'excel',",
				"     fileSystem: 'dynamicdata',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true,",
				"     wildcardPaths:[($source)]) ~> LocalStaging",
				"LocalStaging derive(VALIDATE = true()) ~> derivedColumn9",
				"derivedColumn9 split(case((type($parameter3))==type('date'), true()),",
				"     disjoint: false) ~> split1@(hasdate, dnthave)",
				"split1@hasdate assert(expectTrue(between(toDate(toString(byName('start date'))),currentDate()-9125,currentDate()+15), false, 'assert1')) ~> assert2",
				"assert2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: (concat('silver/',$sink)),",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SilverLineage",
				"split2@OtherData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: (concat('silver/',$sink)),",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:['VALIDATE'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}