{
	"name": "dynamicColumnDWH_copy2",
	"properties": {
		"folder": {
			"name": "test"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Excel1",
						"type": "DatasetReference"
					},
					"name": "LocalStaging"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService4",
						"type": "LinkedServiceReference"
					},
					"name": "SilverLineage"
				},
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "RegexSTR"
				},
				{
					"name": "RegexNum"
				},
				{
					"name": "split1"
				},
				{
					"name": "mobile"
				},
				{
					"name": "email"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "derivedColumn7"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn8"
				}
			],
			"scriptLines": [
				"parameters{",
				"     source as string,",
				"     sink as string,",
				"     parameter1 as string (''),",
				"     parameter2 as string (''),",
				"     parameter3 as string (''),",
				"     parameter4 as string ('')",
				"}",
				"source(output(",
				"          RegionID as short,",
				"          RegionCode as short,",
				"          RegionDescription as string,",
				"          RowLockVersion as short,",
				"          IsActive as boolean,",
				"          MobileNumber as string,",
				"          {start date} as date,",
				"          emailid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:[($source)]) ~> LocalStaging",
				"LocalStaging derive(each(match(type=='string'&&name==$parameter1||name==$parameter2||name==$parameter3), $$ = regexReplace(toString($$), '[!@#$%^&*()]',''))) ~> RegexSTR",
				"split1@date derive(each(match(type=='short'||type=='integer'), $$ = regexReplace(toString($$), '[!@#$%^&*a-zA-Z]',''))) ~> RegexNum",
				"filter1 split(between(toDate(toString(byName($parameter3))),currentDate()-9125,currentDate()+15),",
				"     disjoint: true) ~> split1@(date, nodate)",
				"RegexSTR derive(each(match(name=='MobileNumber'), $$ = case(length(right(toString(byName($parameter2)), 10))==10,(right(toString(byName($parameter2)), 10)),'invalid'))) ~> mobile",
				"mobile derive(each(match(name=='emailid'), $$ = case(like( toString(byName($parameter4)),'%@%.com'),$$,'invalid'))) ~> email",
				"split1@nodate derive(each(match(type=='short'||type=='integer'), $$ = regexReplace(toString($$), '[!@#$%^&*a-zA-Z]',''))) ~> derivedColumn6",
				"derivedColumn8 derive(date = between(toDate(toString(byName($parameter3))),currentDate()-9125,currentDate()+15)) ~> derivedColumn7",
				"derivedColumn7 filter(date==true()) ~> filter1",
				"email derive(each(match(type=='date'), $$ = between(toDate(toString(byName($parameter3))),currentDate()-9125,currentDate()+15)),",
				"          date = case(type($parameter3)=='date', between(toDate(toString(byName($parameter3))),currentDate()-9125,currentDate()+15),false())) ~> derivedColumn8",
				"RegexNum sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: (concat('silver/',$sink)),",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SilverLineage",
				"derivedColumn6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}