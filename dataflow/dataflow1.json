{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "linkedService3",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CashCentreTypeID as short,",
				"          CashCentreTypeCode as integer,",
				"          CashCentreTypeDescription as string,",
				"          RowLockVersion as short,",
				"          IsActive as boolean,",
				"          pass as string,",
				"          Month as date 'dd/MM/yyyy',",
				"          payment as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'excel',",
				"     container: 'dynamicdata',",
				"     fileName: 'cashcentertype.xlsx',",
				"     sheetName: 'Sheet1',",
				"     firstRowAsHeader: true) ~> source1",
				"source1 derive(abc = toString(byName('CashCentreTypeID'))) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(bb = toString(byName('CashCentreTypeID'))),",
				"     each(match(name=='payment'), $$ = sum($$))) ~> aggregate1",
				"source1 aggregate(groupBy(Month = month(Month)),",
				"     each(match(name=='payment'), $$ = sum($$))) ~> aggregate3",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'newdata',",
				"     folderPath: 'selectdata',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}